# Generated by Django 5.2.5 on 2025-09-26 09:14

import borrowings.models
import datetime
import django.db.models.deletion
import django.db.models.expressions
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("books", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Borrowing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("borrow_date", models.DateField(default=borrowings.models.kyiv_today)),
                ("expected_return_date", models.DateField()),
                ("actual_return_date", models.DateField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowings",
                        to="books.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Borrowing",
                "verbose_name_plural": "Borrowings",
                "ordering": ["-borrow_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("expected_return_date__gt", models.F("borrow_date"))
                        ),
                        name="expected_return_after_borrow",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("actual_return_date__isnull", True),
                            ("actual_return_date__gte", models.F("borrow_date")),
                            _connector="OR",
                        ),
                        name="actual_return_after_borrow",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            (
                                "expected_return_date__lte",
                                django.db.models.expressions.CombinedExpression(
                                    models.F("borrow_date"),
                                    "+",
                                    models.Value(datetime.timedelta(days=365)),
                                ),
                            )
                        ),
                        name="expected_return_within_year",
                    ),
                ],
            },
        ),
    ]
